import streamlit as st
import cv2
from ultralytics import YOLO
import numpy as np
import time
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
import os
from PIL import Image

# Set page config
st.set_page_config(
    page_title="AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°", 
    page_icon="üìπ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem !important;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 1px 1px 2px #ccc;
    }
    .sub-header {
        font-size: 1.8rem !important;
        color: #424242;
        margin-top: 0.8rem;
        margin-bottom: 0.8rem;
    }
    .status-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .status-active {
        background-color: #E3F2FD;
        border-left: 4px solid #1E88E5;
    }
    .status-inactive {
        background-color: #F5F5F5;
        border-left: 4px solid #757575;
    }
    .status-stopped {
        background-color: #FFEBEE;
        border-left: 4px solid #E53935;
    }
    .info-box {
        background-color: #E8F5E9;
        border-left: 4px solid #43A047;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .big-button {
        font-size: 1.2rem !important;
        height: 3rem;
        margin: 0.5rem 0;
    }
    .stat-card {
        background-color: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }
    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1E88E5;
    }
    .stat-label {
        font-size: 1rem;
        color: #757575;
    }
    .fps-meter {
        font-size: 1.5rem;
        font-weight: bold;
        text-align: center;
        padding: 0.5rem;
        border-radius: 0.5rem;
        background: linear-gradient(90deg, #f5f5f5 0%, #e0f7fa 100%);
        margin-bottom: 1rem;
    }
    .detection-history-header {
        font-size: 1.3rem;
        color: #424242;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }
    footer {
        margin-top: 3rem;
        text-align: center;
        color: #9E9E9E;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state variables
if 'stop_detection' not in st.session_state:
    st.session_state.stop_detection = False

if 'running' not in st.session_state:
    st.session_state.running = False

if 'detection_history' not in st.session_state:
    st.session_state.detection_history = []

if 'start_time' not in st.session_state:
    st.session_state.start_time = None

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8
@st.cache_resource
def load_model():
    return YOLO("yolov8n.pt")  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å

model = load_model()

# COCO class names for detected objects
class_names = {
    0: "Person",
    15: "Cat",    # ‡πÅ‡∏°‡∏ß
    16: "Dog",    # ‡∏™‡∏∏‡∏ô‡∏±‡∏Ç
    67: "Phone"
}

# Color mapping for detected objects
color_map = {
    0: (0, 255, 0),    # Person - Green
    15: (255, 0, 0),   # Cat - Blue
    16: (0, 0, 255),   # Dog - Red
    67: (255, 255, 0)  # Phone - Yellow
}

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å imports
SAVE_DIR = "captured_images"
if not os.path.exists(SAVE_DIR):
    os.makedirs(SAVE_DIR)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
def stop_detection():
    st.session_state.stop_detection = True
    st.session_state.running = False
    st.session_state.start_time = None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
def start_detection():
    st.session_state.running = True
    st.session_state.stop_detection = False
    st.session_state.start_time = datetime.now()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
def clear_history():
    st.session_state.detection_history = []

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô save_detection ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ
def save_detection(frame, detected_counts):
    if any(count > 0 for count in detected_counts.values()):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}.jpg"
        filepath = os.path.join(SAVE_DIR, filename)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        img.save(filepath)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        detection_info = {
            "timestamp": datetime.now(),
            "filename": filename,
            "detections": {
                "person": detected_counts[0],
                "cat": detected_counts[15],
                "dog": detected_counts[16],
                "phone": detected_counts[67]
            }
        }
        st.session_state.detection_history.append(detection_info)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
def detect_objects():
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
        cap = cv2.VideoCapture(0)
        
        if not cap.isOpened():
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            st.session_state.running = False
            return
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            status_box = st.empty()
            status_box.markdown(
                """<div class="status-box status-active">
                   <h3>üìπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...</h3>
                   <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
                   </div>""", 
                unsafe_allow_html=True
            )
            
            # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            video_container = st.container()
            with video_container:
                stframe = st.empty()
        
        with col2:
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            st.markdown('<h3 class="sub-header">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö</h3>', unsafe_allow_html=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á FPS
            fps_container = st.empty()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            timer_container = st.empty()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
            stats_container = st.container()
            with stats_container:
                person_stat = st.empty()
                cat_stat = st.empty()
                dog_stat = st.empty()
                phone_stat = st.empty()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
        frame_count = 0
        fps_list = []
        prev_time = 0
        curr_time = 0
        fps = 0
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        record_interval = 5  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        last_record_time = time.time()
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        while cap.isOpened() and not st.session_state.stop_detection:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
            ret, frame = cap.read()
            if not ret:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÑ‡∏î‡πâ")
                break
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
            curr_time = time.time()
            if prev_time > 0:
                fps = 1 / (curr_time - prev_time)
                fps_list.append(fps)
                if len(fps_list) > 30:  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ FPS ‡∏à‡∏≤‡∏Å 30 ‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    fps_list.pop(0)
            prev_time = curr_time
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°
            frame_count += 1
            
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            results = model(frame, conf=0.5)  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ confidence threshold
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            detected_counts = {
                0: 0,   # Person
                15: 0,  # Cat
                16: 0,  # Dog
                67: 0   # Phone
            }
            
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            for result in results:
                for box in result.boxes:
                    class_id = int(box.cls[0])
                    if class_id in detected_counts:
                        detected_counts[class_id] += 1
                        
                        # ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ confidence
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        confidence = float(box.conf[0])
                        
                        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                        cv2.rectangle(frame, (x1, y1), (x2, y2), color_map[class_id], 2)
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ confidence
                        label = f"{class_names[class_id]} {confidence:.2f}"
                        cv2.putText(frame, label, (x1, y1 - 10),
                                 cv2.FONT_HERSHEY_SIMPLEX, 0.5, color_map[class_id], 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡∏∞ FPS ‡∏ö‡∏ô‡∏†‡∏≤‡∏û
            overlay = frame.copy()
            # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            cv2.rectangle(overlay, (10, 10), (250, 160), (0, 0, 0), -1)
            cv2.addWeighted(overlay, 0.6, frame, 0.4, 0, frame)
            
            y_pos = 40
            for class_id, name in class_names.items():
                count = detected_counts[class_id]
                cv2.putText(frame, f"{name}: {count}", (20, y_pos),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, color_map[class_id], 2)
                y_pos += 30
                
            avg_fps = sum(fps_list) / len(fps_list) if fps_list else 0
            cv2.putText(frame, f"FPS: {avg_fps:.1f}", (20, y_pos),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô‡∏†‡∏≤‡∏û
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cv2.putText(frame, timestamp, (frame.shape[1] - 240, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô Streamlit
            stframe.image(frame, channels="BGR", use_container_width=True)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
            elapsed_time = datetime.now() - st.session_state.start_time if st.session_state.start_time else datetime.now()
            elapsed_seconds = elapsed_time.total_seconds()
            hours, remainder = divmod(elapsed_seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï FPS
            avg_fps = sum(fps_list) / len(fps_list) if fps_list else 0
            fps_color = "green" if avg_fps > 15 else "orange" if avg_fps > 10 else "red"
            fps_container.markdown(
                f'<div class="fps-meter">FPS: <span style="color:{fps_color}">{avg_fps:.1f}</span></div>', 
                unsafe_allow_html=True
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            timer_container.markdown(
                f'<div class="stat-card">‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}</div>', 
                unsafe_allow_html=True
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
            person_stat.markdown(
                f'<div class="stat-card"><div class="stat-value">{detected_counts[0]}</div><div class="stat-label">‡∏Ñ‡∏ô</div></div>', 
                unsafe_allow_html=True
            )
            cat_stat.markdown(
                f'<div class="stat-card"><div class="stat-value">{detected_counts[15]}</div><div class="stat-label">‡πÅ‡∏°‡∏ß</div></div>', 
                unsafe_allow_html=True
            )
            dog_stat.markdown(
                f'<div class="stat-card"><div class="stat-value">{detected_counts[16]}</div><div class="stat-label">‡∏™‡∏∏‡∏ô‡∏±‡∏Ç</div></div>', 
                unsafe_allow_html=True
            )
            phone_stat.markdown(
                f'<div class="stat-card"><div class="stat-value">{detected_counts[67]}</div><div class="stat-label">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</div></div>', 
                unsafe_allow_html=True
            )
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if curr_time - last_record_time > record_interval:
                save_detection(frame, detected_counts)
                last_record_time = curr_time

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏´‡∏¢‡∏∏‡∏î
            if st.session_state.stop_detection and any(detected_counts.values()):
                save_detection(frame, detected_counts)
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
        cap.release()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        status_box.markdown(
            """<div class="status-box status-stopped">
               <h3>‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</h3>
               <p>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
               </div>""", 
            unsafe_allow_html=True
        )
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        st.session_state.running = False
        st.session_state.stop_detection = False

# UI ‡πÉ‡∏ô Streamlit
st.markdown('<h1 class="main-header">üé• AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°</h1>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown('<h2 class="sub-header">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h2>', unsafe_allow_html=True)
    
    confidence = st.slider(
        "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô (Confidence)",
        min_value=0.1,
        max_value=1.0,
        value=0.5,
        step=0.05,
        help="‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (‡∏Ñ‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏π‡∏á‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î)"
    )
    
    st.markdown("---")
    
    st.markdown('<h2 class="sub-header">üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</h2>', unsafe_allow_html=True)
    st.markdown(
        """
        <div class="info-box">
        <p>‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:</p>
        <ul>
            <li><strong>‡∏Ñ‡∏ô</strong> (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)</li>
            <li><strong>‡πÅ‡∏°‡∏ß</strong> (‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)</li>
            <li><strong>‡∏™‡∏∏‡∏ô‡∏±‡∏Ç</strong> (‡∏™‡∏µ‡πÅ‡∏î‡∏á)</li>
            <li><strong>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</strong> (‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)</li>
        </ul>
        <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</p>
        </div>
        """, 
        unsafe_allow_html=True
    )
    
    st.markdown("---")
    
    st.markdown('<h3 class="sub-header">üì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h3>', unsafe_allow_html=True)
    if st.button("‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", on_click=clear_history):
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for file in os.listdir(SAVE_DIR):
            if file.endswith('.jpg'):
                os.remove(os.path.join(SAVE_DIR, file))
    
    if st.session_state.detection_history:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏π‡∏õ
        latest_detections = st.session_state.detection_history[-5:]
        for detection in reversed(latest_detections):
            col1, col2 = st.columns([1, 2])
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            img_path = os.path.join(SAVE_DIR, detection['filename'])
            if os.path.exists(img_path):
                with col1:
                    st.image(img_path, width=150)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            with col2:
                timestamp = detection['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
                st.markdown(f"**‡πÄ‡∏ß‡∏•‡∏≤:** {timestamp}")
                detections = detection['detections']
                detected_objects = []
                if detections['person']: detected_objects.append(f"‡∏Ñ‡∏ô ({detections['person']})")
                if detections['cat']: detected_objects.append(f"‡πÅ‡∏°‡∏ß ({detections['cat']})")
                if detections['dog']: detected_objects.append(f"‡∏™‡∏∏‡∏ô‡∏±‡∏Ç ({detections['dog']})")
                if detections['phone']: detected_objects.append(f"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ({detections['phone']})")
                st.markdown(f"**‡∏û‡∏ö:** {', '.join(detected_objects)}")
            
            st.markdown("---")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

# Add after UI section before webcam controls
st.markdown("### ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=['jpg', 'jpeg', 'png'])

if uploaded_file is not None:
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    frame = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    st.image(frame, caption='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î', channels="BGR", use_container_width=True)
    
    if st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"):
        # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        results = model(frame, conf=0.5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        detected_counts = {
            0: 0,   # Person
            15: 0,  # Cat
            16: 0,  # Dog
            67: 0   # Phone
        }
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        for result in results:
            for box in result.boxes:
                class_id = int(box.cls[0])
                if class_id in detected_counts:
                    detected_counts[class_id] += 1
                    
                    # ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ confidence
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    confidence = float(box.conf[0])
                    
                    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
                    cv2.rectangle(frame, (x1, y1), (x2, y2), color_map[class_id], 2)
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ confidence
                    label = f"{class_names[class_id]} {confidence:.2f}"
                    cv2.putText(frame, label, (x1, y1 - 10),
                             cv2.FONT_HERSHEY_SIMPLEX, 0.5, color_map[class_id], 2)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        st.image(frame, caption='‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö', channels="BGR", use_container_width=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("‡∏Ñ‡∏ô", detected_counts[0])
        with col2:
            st.metric("‡πÅ‡∏°‡∏ß", detected_counts[15])
        with col3:
            st.metric("‡∏™‡∏∏‡∏ô‡∏±‡∏Ç", detected_counts[16])
        with col4:
            st.metric("‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", detected_counts[67])
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        save_detection(frame, detected_counts)

st.markdown("---")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if not st.session_state.running:
    st.markdown(
        """<div class="status-box status-inactive">
           <h3>üé¨ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö</h3>
           <p>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
           </div>""", 
        unsafe_allow_html=True
    )

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
col1, col2 = st.columns(2)

with col1:
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    start_button = st.button("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", key="start_button", on_click=start_detection, 
                             disabled=st.session_state.running, use_container_width=True)

with col2:
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    stop_button = st.button("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", key="stop_button", on_click=stop_detection, 
                           disabled=not st.session_state.running, use_container_width=True)

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if st.session_state.running:
    detect_objects()

# Footer
st.markdown(
    """
    <footer>
        <p>¬© 2025 AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏° - ‡πÉ‡∏ä‡πâ YOLOv8 ‡πÅ‡∏•‡∏∞ Streamlit</p>
    </footer>
    """, 
    unsafe_allow_html=True
)